# coding: utf-8
from __future__ import unicode_literals
from __future__ import absolute_import
from invoke import task
from invoke import context
from io import open

import os
import testinfra
import yaml


PROJECT_ROOT_DIR = os.path.dirname(os.path.abspath(__file__))

ANSIBLE_CFG = '''
[ssh_connection]
control_path = %(directory)s/%%h-%%p-%%r
scp_if_ssh = True

[defaults]
inventory = ./inventory
gathering = smart
fact_caching_timeout = 300
host_key_checking = False
retry_files_enabled = False
fact_caching = jsonfile
ansible_managed = Ansible managed: Do NOT edit this file manually!
nocows = 1
pipelining = True
fact_caching_connection = tmp/ansible-facts
'''


def create_ansible_config(filename, mode='w', encoding='utf-8'):
    with open(filename, mode=mode, encoding=encoding) as fd:
        fd.write(ANSIBLE_CFG)


def create_ansible_inventory(filename, inventory, mode='w', encoding='utf-8'):
    with open(filename, mode=mode, encoding=encoding) as fd:
        fd.write(inventory)


def read_molecule_yml(scenario):
    molecule_dir = os.path.join(PROJECT_ROOT_DIR, 'molecule/{scenario}'.format(scenario=scenario))  # noqa: E501
    molecule_yml = os.path.join(molecule_dir, 'molecule.yml')

    with open(molecule_yml, mode='r') as fd:
        jdata = yaml.load(fd.read())

    return jdata


def test_scenario(c=context.Context(), scenario='default', destroy=False):
    molecule_dir = os.path.join(PROJECT_ROOT_DIR, 'molecule/{scenario}'.format(scenario=scenario))
    ansible_cfg_filename = os.path.join(molecule_dir, 'ansible.cfg')
    inventory_filename = os.path.join(molecule_dir, 'inventory')
    molecule_data = read_molecule_yml(scenario=scenario)

    inventory_names = [x['name'] for x in molecule_data['platforms']]
    driver_name = molecule_data['driver']['name']
    inventory_items = []

    for name in inventory_names:
        inventory_items.append('{name} ansible_connection={driver}'.format(name=name, driver=driver_name))

    inventory = '\n'.join(inventory_items)
    inventory += '\n'

    original_dir = os.getcwd()
    os.chdir(molecule_dir)
    create_ansible_config(filename=ansible_cfg_filename)
    create_ansible_inventory(filename=inventory_filename, inventory=inventory)

    try:
        for run_on in inventory_names:
            os.environ.setdefault('MOLECULE_INVENTORY_FILE', 'inventory')
            cmd_args = [
                'pytest',
                '--connection={driver}'.format(driver=driver_name),
                '--hosts={run_on}'.format(run_on=run_on),
                '-vvs',
                '-rs',
                'tests/'
            ]
            cmd = ' '.join(cmd_args)
            c.run(cmd, pty=True)

    finally:
        os.chdir(original_dir)

    if destroy:
        c.run('molecule destroy -s {scenario}'.format(scenario=scenario), hide=True)


@task
def clean(c, echo=False):
    """Cleans all compiled artifacts recursively

    """
    file_patterns = [
        '*.pyc',
        '.coverage',
    ]

    dir_patterns = [
        'dist',
        '*.egg-info',
        '.tox',
        '__pycache__',
        'tmp',
    ]

    for pattern in file_patterns:
        c.run('find . -name "{}" -type f | xargs rm -f'.format(pattern), echo=echo)

    for pattern in dir_patterns:
        c.run('find . -name "{}" -type d | xargs rm -rf'.format(pattern), echo=echo)


@task
def test(c, scenario='default', destroy=False):
    """Test a role

    """
    clean(c)
    test_scenario(c=c, scenario=scenario, destroy=destroy)


@task
def travis(c, scenario='default', pty=True, destroy=True):
    """Run our tests but help travis along

    """
    c.run('molecule lint -s {scenario}'.format(scenario=scenario), pty=pty)
    c.run('molecule syntax -s {scenario}'.format(scenario=scenario), pty=pty)
    c.run('molecule destroy -s {scenario}'.format(scenario=scenario), pty=pty)
    c.run('molecule converge -s {scenario}'.format(scenario=scenario), pty=pty)
    test(c, scenario=scenario, destroy=destroy)
